// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/gold-kou/go-housework/app/model/db"
	reflect "reflect"
)

// MockTaskRepositoryInterface is a mock of TaskRepositoryInterface interface
type MockTaskRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryInterfaceMockRecorder
}

// MockTaskRepositoryInterfaceMockRecorder is the mock recorder for MockTaskRepositoryInterface
type MockTaskRepositoryInterfaceMockRecorder struct {
	mock *MockTaskRepositoryInterface
}

// NewMockTaskRepositoryInterface creates a new mock instance
func NewMockTaskRepositoryInterface(ctrl *gomock.Controller) *MockTaskRepositoryInterface {
	mock := &MockTaskRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskRepositoryInterface) EXPECT() *MockTaskRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertTask mocks base method
func (m *MockTaskRepositoryInterface) InsertTask(arg0 *db.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTask indicates an expected call of InsertTask
func (mr *MockTaskRepositoryInterfaceMockRecorder) InsertTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).InsertTask), arg0)
}

// SelectTaskWhereFamilyIDDate mocks base method
func (m *MockTaskRepositoryInterface) SelectTaskWhereFamilyIDDate(arg0 uint64, arg1 string) ([]*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTaskWhereFamilyIDDate", arg0, arg1)
	ret0, _ := ret[0].([]*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTaskWhereFamilyIDDate indicates an expected call of SelectTaskWhereFamilyIDDate
func (mr *MockTaskRepositoryInterfaceMockRecorder) SelectTaskWhereFamilyIDDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTaskWhereFamilyIDDate", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).SelectTaskWhereFamilyIDDate), arg0, arg1)
}

// UpdateTask mocks base method
func (m *MockTaskRepositoryInterface) UpdateTask(arg0 *db.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask
func (mr *MockTaskRepositoryInterfaceMockRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).UpdateTask), arg0)
}

// DeleteTaskWhereMemberID mocks base method
func (m *MockTaskRepositoryInterface) DeleteTaskWhereMemberID(arg0 *db.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskWhereMemberID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskWhereMemberID indicates an expected call of DeleteTaskWhereMemberID
func (mr *MockTaskRepositoryInterfaceMockRecorder) DeleteTaskWhereMemberID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskWhereMemberID", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).DeleteTaskWhereMemberID), arg0)
}
