// Code generated by MockGen. DO NOT EDIT.
// Source: family.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/gold-kou/go-housework/app/model/db"
	reflect "reflect"
)

// MockFamilyRepositoryInterface is a mock of FamilyRepositoryInterface interface
type MockFamilyRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFamilyRepositoryInterfaceMockRecorder
}

// MockFamilyRepositoryInterfaceMockRecorder is the mock recorder for MockFamilyRepositoryInterface
type MockFamilyRepositoryInterfaceMockRecorder struct {
	mock *MockFamilyRepositoryInterface
}

// NewMockFamilyRepositoryInterface creates a new mock instance
func NewMockFamilyRepositoryInterface(ctrl *gomock.Controller) *MockFamilyRepositoryInterface {
	mock := &MockFamilyRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockFamilyRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFamilyRepositoryInterface) EXPECT() *MockFamilyRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertFamily mocks base method
func (m *MockFamilyRepositoryInterface) InsertFamily(arg0 *db.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFamily", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFamily indicates an expected call of InsertFamily
func (mr *MockFamilyRepositoryInterfaceMockRecorder) InsertFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFamily", reflect.TypeOf((*MockFamilyRepositoryInterface)(nil).InsertFamily), arg0)
}

// UpdateFamily mocks base method
func (m *MockFamilyRepositoryInterface) UpdateFamily(arg0 *db.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFamily", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFamily indicates an expected call of UpdateFamily
func (mr *MockFamilyRepositoryInterfaceMockRecorder) UpdateFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFamily", reflect.TypeOf((*MockFamilyRepositoryInterface)(nil).UpdateFamily), arg0)
}

// DeleteFamily mocks base method
func (m *MockFamilyRepositoryInterface) DeleteFamily(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFamily", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFamily indicates an expected call of DeleteFamily
func (mr *MockFamilyRepositoryInterfaceMockRecorder) DeleteFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFamily", reflect.TypeOf((*MockFamilyRepositoryInterface)(nil).DeleteFamily), arg0)
}

// ShowFamily mocks base method
func (m *MockFamilyRepositoryInterface) ShowFamily(arg0 uint64) (*db.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowFamily", arg0)
	ret0, _ := ret[0].(*db.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowFamily indicates an expected call of ShowFamily
func (mr *MockFamilyRepositoryInterfaceMockRecorder) ShowFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowFamily", reflect.TypeOf((*MockFamilyRepositoryInterface)(nil).ShowFamily), arg0)
}
