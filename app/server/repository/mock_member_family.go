// Code generated by MockGen. DO NOT EDIT.
// Source: member_family.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/gold-kou/go-housework/app/model/db"
	reflect "reflect"
)

// MockMemberFamilyRepositoryInterface is a mock of MemberFamilyRepositoryInterface interface
type MockMemberFamilyRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMemberFamilyRepositoryInterfaceMockRecorder
}

// MockMemberFamilyRepositoryInterfaceMockRecorder is the mock recorder for MockMemberFamilyRepositoryInterface
type MockMemberFamilyRepositoryInterfaceMockRecorder struct {
	mock *MockMemberFamilyRepositoryInterface
}

// NewMockMemberFamilyRepositoryInterface creates a new mock instance
func NewMockMemberFamilyRepositoryInterface(ctrl *gomock.Controller) *MockMemberFamilyRepositoryInterface {
	mock := &MockMemberFamilyRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMemberFamilyRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberFamilyRepositoryInterface) EXPECT() *MockMemberFamilyRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertMemberFamily mocks base method
func (m *MockMemberFamilyRepositoryInterface) InsertMemberFamily(arg0 *db.MemberFamily) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMemberFamily", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMemberFamily indicates an expected call of InsertMemberFamily
func (mr *MockMemberFamilyRepositoryInterfaceMockRecorder) InsertMemberFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMemberFamily", reflect.TypeOf((*MockMemberFamilyRepositoryInterface)(nil).InsertMemberFamily), arg0)
}

// DeleteMemberFamily mocks base method
func (m *MockMemberFamilyRepositoryInterface) DeleteMemberFamily(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberFamily", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemberFamily indicates an expected call of DeleteMemberFamily
func (mr *MockMemberFamilyRepositoryInterfaceMockRecorder) DeleteMemberFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberFamily", reflect.TypeOf((*MockMemberFamilyRepositoryInterface)(nil).DeleteMemberFamily), arg0)
}

// DeleteMemberFromFamily mocks base method
func (m *MockMemberFamilyRepositoryInterface) DeleteMemberFromFamily(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberFromFamily", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemberFromFamily indicates an expected call of DeleteMemberFromFamily
func (mr *MockMemberFamilyRepositoryInterfaceMockRecorder) DeleteMemberFromFamily(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberFromFamily", reflect.TypeOf((*MockMemberFamilyRepositoryInterface)(nil).DeleteMemberFromFamily), arg0)
}

// GetMemberFamilyWhereMemberID mocks base method
func (m *MockMemberFamilyRepositoryInterface) GetMemberFamilyWhereMemberID(arg0 uint64) (*db.MemberFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberFamilyWhereMemberID", arg0)
	ret0, _ := ret[0].(*db.MemberFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberFamilyWhereMemberID indicates an expected call of GetMemberFamilyWhereMemberID
func (mr *MockMemberFamilyRepositoryInterfaceMockRecorder) GetMemberFamilyWhereMemberID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberFamilyWhereMemberID", reflect.TypeOf((*MockMemberFamilyRepositoryInterface)(nil).GetMemberFamilyWhereMemberID), arg0)
}

// ListMemberFamiliesWhereFamilyID mocks base method
func (m *MockMemberFamilyRepositoryInterface) ListMemberFamiliesWhereFamilyID(arg0 uint64) ([]*db.MemberFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemberFamiliesWhereFamilyID", arg0)
	ret0, _ := ret[0].([]*db.MemberFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemberFamiliesWhereFamilyID indicates an expected call of ListMemberFamiliesWhereFamilyID
func (mr *MockMemberFamilyRepositoryInterfaceMockRecorder) ListMemberFamiliesWhereFamilyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberFamiliesWhereFamilyID", reflect.TypeOf((*MockMemberFamilyRepositoryInterface)(nil).ListMemberFamiliesWhereFamilyID), arg0)
}
