// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/gold-kou/go-housework/app/model/db"
	reflect "reflect"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertUser mocks base method
func (m *MockUserRepositoryInterface) InsertUser(arg0 *db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryInterfaceMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).InsertUser), arg0)
}

// GetUserWhereUsername mocks base method
func (m *MockUserRepositoryInterface) GetUserWhereUsername(arg0 string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWhereUsername", arg0)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWhereUsername indicates an expected call of GetUserWhereUsername
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserWhereUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWhereUsername", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserWhereUsername), arg0)
}

// GetUserWhereUserID mocks base method
func (m *MockUserRepositoryInterface) GetUserWhereUserID(arg0 uint64) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWhereUserID", arg0)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWhereUserID indicates an expected call of GetUserWhereUserID
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserWhereUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWhereUserID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserWhereUserID), arg0)
}

// GetUsersWhereUserIDs mocks base method
func (m *MockUserRepositoryInterface) GetUsersWhereUserIDs(arg0 []uint64) ([]*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWhereUserIDs", arg0)
	ret0, _ := ret[0].([]*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWhereUserIDs indicates an expected call of GetUsersWhereUserIDs
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUsersWhereUserIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWhereUserIDs", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUsersWhereUserIDs), arg0)
}

// DeleteUserWhereUsername mocks base method
func (m *MockUserRepositoryInterface) DeleteUserWhereUsername(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserWhereUsername", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserWhereUsername indicates an expected call of DeleteUserWhereUsername
func (mr *MockUserRepositoryInterfaceMockRecorder) DeleteUserWhereUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWhereUsername", reflect.TypeOf((*MockUserRepositoryInterface)(nil).DeleteUserWhereUsername), arg0)
}
