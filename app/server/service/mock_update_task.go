// Code generated by MockGen. DO NOT EDIT.
// Source: update_task.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/gold-kou/go-housework/app/model"
	db "github.com/gold-kou/go-housework/app/model/db"
	schemamodel "github.com/gold-kou/go-housework/app/model/schemamodel"
	reflect "reflect"
)

// MockUpdateTaskServiceInterface is a mock of UpdateTaskServiceInterface interface
type MockUpdateTaskServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateTaskServiceInterfaceMockRecorder
}

// MockUpdateTaskServiceInterfaceMockRecorder is the mock recorder for MockUpdateTaskServiceInterface
type MockUpdateTaskServiceInterfaceMockRecorder struct {
	mock *MockUpdateTaskServiceInterface
}

// NewMockUpdateTaskServiceInterface creates a new mock instance
func NewMockUpdateTaskServiceInterface(ctrl *gomock.Controller) *MockUpdateTaskServiceInterface {
	mock := &MockUpdateTaskServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUpdateTaskServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateTaskServiceInterface) EXPECT() *MockUpdateTaskServiceInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockUpdateTaskServiceInterface) Execute(arg0 *model.Auth, arg1 *schemamodel.RequestUpdateTask) (*db.Task, *db.Family, *db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(*db.Family)
	ret2, _ := ret[2].(*db.User)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Execute indicates an expected call of Execute
func (mr *MockUpdateTaskServiceInterfaceMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateTaskServiceInterface)(nil).Execute), arg0, arg1)
}
