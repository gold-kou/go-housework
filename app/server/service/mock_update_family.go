// Code generated by MockGen. DO NOT EDIT.
// Source: update_family.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/gold-kou/go-housework/app/model"
	db "github.com/gold-kou/go-housework/app/model/db"
	schemamodel "github.com/gold-kou/go-housework/app/model/schemamodel"
	reflect "reflect"
)

// MockUpdateFamilyServiceInterface is a mock of UpdateFamilyServiceInterface interface
type MockUpdateFamilyServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateFamilyServiceInterfaceMockRecorder
}

// MockUpdateFamilyServiceInterfaceMockRecorder is the mock recorder for MockUpdateFamilyServiceInterface
type MockUpdateFamilyServiceInterfaceMockRecorder struct {
	mock *MockUpdateFamilyServiceInterface
}

// NewMockUpdateFamilyServiceInterface creates a new mock instance
func NewMockUpdateFamilyServiceInterface(ctrl *gomock.Controller) *MockUpdateFamilyServiceInterface {
	mock := &MockUpdateFamilyServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUpdateFamilyServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateFamilyServiceInterface) EXPECT() *MockUpdateFamilyServiceInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockUpdateFamilyServiceInterface) Execute(arg0 *model.Auth, arg1 *schemamodel.RequestUpdateFamily) (*db.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*db.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockUpdateFamilyServiceInterfaceMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateFamilyServiceInterface)(nil).Execute), arg0, arg1)
}
